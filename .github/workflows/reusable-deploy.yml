name: Reusable Build and Deploy

on:
  workflow_call:
    inputs:
      appname:
        required: true
        type: string
      appdata_dirs:
        required: false
        type: string
        default: '[]' # Default to an empty list
    secrets:
      # Infrastructure and Domain secrets
      SERVER_IP:
        required: true
      DOMAIN_NAME:
        required: true
      
      # GCP Credentials
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_SERVICE_ACCOUNT:
        required: true
      GCP_PROJECT_ID:
        required: true
        
      # Cloudflare Credentials
      CLOUDFLARE_ZONE_ID:
        required: true
      CLOUDFLARE_EMAIL:
        required: true
      CLOUDFLARE_API_TOKEN:
        required: true
        
      # Ansible & GitHub Credentials
      ANSIBLE_SSH_PRIVATE_KEY:
        required: true
      ANSIBLE_VAULT_PASSWORD:
        required: true
      GH_PAT:
        required: true

env:
  APPNAME: ${{ inputs.appname }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/app-images/${{ env.APPNAME }}:latest

  provision-hostname:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout ansible config repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/gcp-server-config
          token: ${{ secrets.GH_PAT }}

      - name: Run hostname provisioning script
        # This step executes the script and provides all secrets and inputs as environment variables
        env:
          APPNAME: ${{ inputs.appname }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          chmod +x ./.github/scripts/provision-hostname.sh
          ./.github/scripts/provision-hostname.sh

  deploy:
    needs: provision-hostname
    runs-on: ubuntu-latest
    steps:
      - name: Checkout service repo
        uses: actions/checkout@v4

      - name: Check for compose file type
        id: check_files
        run: |
          if [[ -f compose.yml ]]; then
            echo "file_to_use=compose.yml" >> $GITHUB_OUTPUT
          else
            echo "file_to_use=compose.yml.template" >> $GITHUB_OUTPUT
          fi

      - name: Checkout ansible config repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/gcp-server-config
          token: ${{ secrets.GH_PAT }}
          path: ansible-config

      - name: Create services directory locally
        run: mkdir -p ./ansible-config/services

      - name: Prepare compose file for deployment
        run: |
          sed "s/__APP_NAME__/${{ env.APPNAME }}/g" ${{ steps.check_files.outputs.file_to_use }} > ./ansible-config/services/${{ env.APPNAME }}.yml

      - name: Upload compose file to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: dev
          key: ${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}
          source: "./ansible-config/services/${{ env.APPNAME }}.yml"
          target: "/home/dev/"
          strip_components: 3

      - name: Create app-specific data directories
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: dev
          key: ${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}
          script: |
            if ! command -v jq &> /dev/null
            then
                sudo apt-get update && sudo apt-get install -y jq
            fi
            for dir in $(echo '${{ inputs.appdata_dirs }}' | jq -r '.[]'); do
              sudo mkdir -p "/opt/docker/appdata/${{ inputs.appname }}/$dir"
            done

      - name: Cache pip and Install Ansible
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Ansible and Run Playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
        run: |
          python3 -m pip install ansible
          echo "${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}" > ansible_ssh_key
          chmod 600 ansible_ssh_key
          
          echo "[servers]" > ./ansible-config/inventory
          echo "app-server-1 ansible_host=${{ secrets.SERVER_IP }} ansible_user=dev" >> ./ansible-config/inventory
          
          ansible-playbook \
            -i ./ansible-config/inventory \
            ./ansible-config/playbook.yml \
            --private-key ./ansible_ssh_key \
            --vault-password-file <(echo ${{ secrets.ANSIBLE_VAULT_PASSWORD }}) \
            --extra-vars "app_name=${{ env.APPNAME }} domain_name=${{ secrets.DOMAIN_NAME }}"